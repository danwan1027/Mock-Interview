"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.genFromUrl = exports.convertSwagger2OpenAPI = exports.genFromData = exports.genSDK = exports.CliConfig = void 0;
const tslib_1 = require("tslib");
const fs = require("fs");
const path = require("path");
const util_1 = require("./util");
const ServiceGenerator_1 = require("./ServiceGenerator");
class CliConfig extends ServiceGenerator_1.GenConfig {
    constructor() {
        super(...arguments);
        this.autoClear = true;
        /** 自动清除旧文件时忽略列表 */
        this.ignoreDelete = [];
    }
}
exports.CliConfig = CliConfig;
function genSDK(cfg) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let configs = [];
        [].concat(cfg).forEach(c => {
            if (typeof c === 'string') {
                let cfgData = require(c);
                if (configs.__esModule) {
                    cfgData = configs.default;
                }
                configs.push(...[].concat(cfgData));
            }
            else if (typeof c === 'object') {
                configs.push(c);
            }
            else {
                throw new util_1.CommonError(`fail load config: ${c}`);
            }
        });
        return Promise.all(configs.map(cfg => {
            cfg = Object.assign(Object.assign({}, new CliConfig()), cfg);
            cfg.sdkDir = getAbsolutePath(cfg.sdkDir);
            cfg.interfaceTemplatePath = getAbsolutePath(cfg.interfaceTemplatePath);
            cfg.templatePath = getAbsolutePath(cfg.templatePath);
            return genFromUrl(cfg);
        }));
    });
}
exports.genSDK = genSDK;
function genFromData(config, data) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        config = Object.assign(Object.assign({}, new CliConfig()), config);
        if (!data || !data.paths || !data.info) {
            throw new util_1.CommonError(`数据格式不正确 ${config.api}`);
        }
        mkdir(config.sdkDir);
        if (config.saveOpenAPIData) {
            fs.writeFileSync(path.join(config.sdkDir, 'origin.json'), JSON.stringify(data, null, 2), 'utf8');
        }
        if (data.swagger === '2.0') {
            data = yield convertSwagger2OpenAPI(data);
        }
        else {
            util_1.fixOpenAPI(data);
        }
        if (!data.openapi || !data.openapi.startsWith('3.')) {
            throw new util_1.CommonError('数据格式不正确，仅支持 OpenAPI 3.0/Swagger 2.0');
        }
        if (config.autoClear && fs.existsSync(config.sdkDir)) {
            fs.readdirSync(config.sdkDir).forEach(file => {
                if (!['d.ts', '.ts', '.js'].some(ext => path.extname(file) === ext) ||
                    (config.requestLib && file.startsWith('base.'))) {
                    return;
                }
                const absoluteFilePath = path.join(config.sdkDir, '/', file);
                if ((config.ignoreDelete || []).indexOf(file) === -1 && absoluteFilePath !== file) {
                    fs.unlinkSync(absoluteFilePath);
                }
            });
        }
        if (config.saveOpenAPIData) {
            fs.writeFileSync(path.join(config.sdkDir, 'oas.json'), JSON.stringify(data, null, 2), 'utf8');
        }
        const generator = new ServiceGenerator_1.ServiceGenerator(config, data);
        generator.genFile();
    });
}
exports.genFromData = genFromData;
function convertSwagger2OpenAPI(data) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        util_1.fixSwagger(data);
        data = yield util_1.s2o(data);
        util_1.fixOpenAPI(data);
        return data;
    });
}
exports.convertSwagger2OpenAPI = convertSwagger2OpenAPI;
function genFromUrl(config) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        try {
            const data = yield JSON.parse(yield util_1.requestData(config.api));
            return genFromData(config, data);
        }
        catch (error) {
            console.warn(config.api, error);
            throw error;
        }
    });
}
exports.genFromUrl = genFromUrl;
function getAbsolutePath(filePath) {
    return filePath
        ? path.isAbsolute(filePath)
            ? filePath
            : path.join(process.cwd(), filePath)
        : filePath;
}
function mkdir(dir) {
    if (!fs.existsSync(dir)) {
        mkdir(path.dirname(dir));
        fs.mkdirSync(dir);
    }
}
