/**
 * Streaming Avatar SDK
 * Heygen Streaming Avatar
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: api@heygen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { IceRequest, IceResponse, InterruptRequest, InterruptResponse, NewSessionData, NewSessionRequest, NewSessionResponse, StartSessionRequest, StartSessionResponse, StopSessionRequest, StopSessionResponse, TaskRequest, TaskResponse } from '../models/index';
import { EventType } from '../events/events';
export interface CreateStreamingAvatarRequest {
    newSessionRequest: NewSessionRequest;
}
export interface InterruptOperationRequest {
    interruptRequest: InterruptRequest;
}
export interface SpeakRequest {
    taskRequest: TaskRequest;
}
export interface StartStreamingAvatarRequest {
    startSessionRequest: StartSessionRequest;
}
export interface StopSessionOperationRequest {
    stopSessionRequest: StopSessionRequest;
}
export interface SubmitICECandidateRequest {
    iceRequest: IceRequest;
}
/**
 *
 */
export declare class StreamingAvatarApi extends runtime.BaseAPI {
    private eventSystem;
    private listenerMap;
    /**
     * This call is encapsulated by createAndStartAvatar, only use this for advanced applications
     * Opens and returns a new streaming avatar session
     */
    createStreamingAvatarRaw(requestParameters: CreateStreamingAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewSessionResponse>>;
    /**
     * This call is encapsulated by createAndStartAvatar, only use this for advanced applications
     * Opens and returns a new streaming avatar session
     */
    createStreamingAvatar(requestParameters: CreateStreamingAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewSessionResponse>;
    /**
     * Interrupt the current Streaming
     */
    interruptRaw(requestParameters: InterruptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InterruptResponse>>;
    /**
     * Interrupt the current Streaming
     */
    interrupt(requestParameters: InterruptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InterruptResponse>;
    /**
     * Pass text to be repeated by avatar
     */
    speakRaw(requestParameters: SpeakRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskResponse>>;
    /**
     * Pass text to be repeated by avatar
     */
    speak(requestParameters: SpeakRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskResponse>;
    /**
     * This call is encapsulated by createAndStartAvatar, only use this for advanced applications
     * Starts the streaming avatar session. Must be called after creation.
     */
    startStreamingAvatarRaw(requestParameters: StartStreamingAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StartSessionResponse>>;
    /**
     * This call is encapsulated by createAndStartAvatar, only use this for advanced applications
     * Starts the streaming avatar session. Must be called after creation.
     */
    startStreamingAvatar(requestParameters: StartStreamingAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StartSessionResponse>;
    /**
     * Stops the streaming avatar session. This endpoint has been exposed to support advanced applications. To ensure the RTC session is correctly closed, please use stopAvatar instead.
     */
    stopSessionRaw(requestParameters: StopSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StopSessionResponse>>;
    /**
     * Stops the streaming avatar session. This endpoint has been exposed to support advanced applications. To ensure the RTC session is correctly closed, please use stopAvatar instead.
     */
    stopSession(requestParameters: StopSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StopSessionResponse>;
    /**
     * This call is encapsulated by createAndStartAvatar, only use this for advanced applications
     * Submit the ICE candidate. Dependent on active session.
     */
    submitICECandidateRaw(requestParameters: SubmitICECandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IceResponse>>;
    /**
     * This call is encapsulated by createAndStartAvatar, only use this for advanced applications
     * Submit the ICE candidate. Dependent on active session.
     */
    submitICECandidate(requestParameters: SubmitICECandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IceResponse>;
    /**
     * This call both terminates the streaming avatar session and closes the RTC connection
     */
    stopAvatar(requestParameters: StopSessionOperationRequest, debugStream?: (string: any) => void, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * This call creates and starts a new streaming avatar session
     */
    createStartAvatar(requestParameters: CreateStreamingAvatarRequest, debugStream?: (string: any) => void, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewSessionData>;
    addEventHandler<K extends EventType>(event: K, listener: (data: any) => any): void;
    removeEventHandler<K extends EventType>(event: K, listener: (data: any) => any): void;
    get mediaStream(): MediaStream;
}
